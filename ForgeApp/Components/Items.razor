@using Radzen;
@using Radzen.Blazor;
@using ForgeApp.Controllers;


<RadzenDialog />

@if (!forgeControl.IsObjectsLoad)
{
    if (!hasError)
    {

        <div class="spinner-border" style="width:30px;height:30px;margin-left:50%">
        </div>
        <b>Loading </b>
    }
    else
    {

        <div class="oi oi-ban" style="width:30px;height:30px;margin-left:50%">
        </div>
        <b>Error </b>
    }
}
else
{

    <button class="btn btn-outline-info" @onclick="@Refresh">
        Refresh <span class="oi oi-reload" />
    </button>

    <RadzenDataList @bind-value="@objects" WrapItems="true" Data="@objects" AllowPaging="true" PageNumbersCount="5" Count="3" TItem="OSSRequest.BucketObject">
        <Template Context="OssObject">
            <RadzenCard id="card" Style="width:auto">
                <style>
                    .card {
                        transition: box-shadow 0.1s transform 0.1s;
                    }

                        .card:hover {
                            background-image: linear-gradient(180deg, rgb(70 64 100) 0%, #613b6a 65%);
                            box-shadow: 0px 0px 30px rgba(0,0,0, 0.6);
                            color: aliceblue;
                        }
                </style>
                <div class="flex-lg-row">
                    <div class="flex-row">
                        <span style="width:32px;height:32px">
                            <img src="@OssObject.Image" />
                        </span>
                        <button class="btn btn-outline-success" @onclick="@((args)=>{ this.Show(OssObject); })">
                            Show
                        </button>
                        <button class="btn btn-outline-warning" @onclick="@((args) => { this.Remove(OssObject); })">
                            Remove
                        </button>

                    </div>
                    <div class="row">
                        <div class="col-6">
                            <div>Bucket Name:</div>
                            <b>@OssObject.BucketKey</b>
                            <br />
                        </div>
                        <div class="col-6">
                            <div>Object Name:</div>
                            <b>@OssObject.ObjectKey</b>
                            <br />
                        </div>
                    </div>
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>
}
@code {

    //Create an object for control of translate files.
    private ModelDerivative derivative;

    //all objects from Forge
    IEnumerable<OSSRequest.BucketObject> objects = null;


    protected override void OnInitialized()
    {
        
        //Authorized  is true
        forgeControl.IsAuthorized = true;

        //Set changes.
        forgeControl.SetChanged();

        //If error occurred.
        forgeControl.OSS.ErrorOccurred += (e) =>
        {
            forgeControl.Status = "Error Occurred : " + e;
            forgeControl.IsObjectsLoad = false;
            forgeControl.SetChanged();
        };

        //Load objects
        forgeControl.Status = "Loading objects...";
        forgeControl.IsObjectsLoad = false;
        forgeControl.SetChanged();
        LoadAllObjects();

    }

    //if any error was occurred.
    private bool hasError = false;


    /// <summary>
    /// Remove the object from bucket.
    /// </summary>
    /// <param name="_object">The obejct will be removed</param>
    private async void Remove(OSSRequest.BucketObject _object)
    {
        //Show the user message box for delete
        var result = await dialogService.Confirm("Want you to delete the object?", "ForgeApp",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", Top = "20%", Left = "30%" });

        //If user selected yes
        if (result == true)
        {
            //Delete the object
            bool deleted = await Task.Run(() => forgeControl.OSS.DeleteObject(_object.BucketKey, _object.ObjectKey));

            //Deletion is successed.
            if (deleted)
            {
                //remove object from list.
                var objs = this.objects.ToList();
                objs.Remove(_object);
                this.objects = objs;
                StateHasChanged();

            }
            else
            {
                //Show message to user.
                forgeControl.Status = "Object (" + _object.ObjectKey + ") can not be deleted!";
                forgeControl.SetChanged();
            }
        }

    }

    /// <summary>
    /// Reloading objects.
    /// </summary>
    private void Refresh()
    {
        forgeControl.Status = "Reloading...";
        forgeControl.IsObjectsLoad = false;
        forgeControl.SetChanged();
        objects = null;
        LoadAllObjects();
    }

    /// <summary>
    /// Load all objects in all buckets.
    /// </summary>
    private async void LoadAllObjects()
    {
        try
        {

            //Get all buckets.
            var buckets = await forgeControl.GetAllBuckets();

            //Create translate requester if does not exist.
            if (derivative == null)
                derivative = new ModelDerivative(forgeControl.OSS.token);

            //New list for all objects.
            var temp = new List<OSSRequest.BucketObject>();
            foreach (var item in buckets)
            {
                //Get all objects
                var objs = await forgeControl.GetAllObjects(item.BucketKey);
                foreach (var obj in objs)
                {
                    //Request the translate object
                    await derivative.TranslateObject(ModelDerivative.Base64Encode(obj.ObjectID));

                    //Get URN & Image from translate requester. Store them in the object.
                    obj.URN = derivative.URN;
                    obj.Image = "data:image/png;base64," + await derivative.GetThumbnail();

                   
                    temp.Add(obj);
                }
            }


            //Store data from temporary list
            objects = temp.AsEnumerable<OSSRequest.BucketObject>();

            //Release the temporary list
            temp = null;

            //Set changed
            forgeControl.Status = "Objects are loaded";
            forgeControl.IsObjectsLoad = true;

        }
        catch (ArgumentNullException)
        {
            forgeControl.Status = "Error : Network connection error";
            hasError = true;
        }
        catch (Exception ex)
        {
            forgeControl.Status = "Error : " + ex.Message;
            hasError = true;
        }
        finally
        {
            forgeControl.SetChanged();
            StateHasChanged();
        }


    }


    /// <summary>
    /// Show object to Forge Viewer
    /// </summary>
    /// <param name="_object">Object to be showed</param>

    private async void Show(OSSRequest.BucketObject _object)
    {
        
        //Create the derivative.
        if (derivative == null)
            derivative = new ModelDerivative(forgeControl.OSS.token);

        //send a translate request.
        await derivative.TranslateObject(ModelDerivative.Base64Encode(_object.ObjectID));

        //set status and show into Forge Viewer.
        forgeControl.Status = "Object is showing: " + _object.ObjectKey;
        forgeControl.SetChanged();
        await jsRuntime.InvokeVoidAsync("launchViewer", derivative.URN, forgeControl.OSS.token.AccessToken);
    }
}

